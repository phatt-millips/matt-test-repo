name: Publish Release and Notify Teams

on:
  push:
    branches:
      - stable

jobs:
  publish-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Find latest draft release
        id: find-release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Find the latest draft release
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const draftReleases = releases.data.filter(release => release.draft);
            if (draftReleases.length === 0) {
              core.setFailed('No draft releases found. Please ensure a draft release is created before merging to stable.');
              return;
            }
            
            // Sort by creation date (newest first)
            draftReleases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const latestDraft = draftReleases[0];
            
            console.log(`Found draft release: ${latestDraft.name}`);
            core.setOutput('release_id', latestDraft.id);
            core.setOutput('release_name', latestDraft.name);
            core.setOutput('release_body', latestDraft.body);
            core.setOutput('tag_name', latestDraft.tag_name);

      - name: Publish release
        id: publish-release
        if: steps.find-release.outputs.release_id
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = '${{ steps.find-release.outputs.release_id }}';
            
            try {
              const response = await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: parseInt(releaseId),
                draft: false,
                prerelease: false
              });
              
              console.log(`Release published: ${response.data.html_url}`);
              core.setOutput('release_url', response.data.html_url);
            } catch (error) {
              core.setFailed(`Failed to publish release: ${error.message}`);
            }
      
      - name: Create tag on stable
        if: steps.publish-release.outputs.release_url
        run: |
          TAG_NAME="${{ steps.find-release.outputs.tag_name }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Send notification to Teams
        if: steps.publish-release.outputs.release_url
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          title: "ðŸš€ New Release Published: ${{ steps.find-release.outputs.release_name }}"
          summary: "A new release has been published"
          theme_color: "5CB589"
          sections: |
            [{
              "activityTitle": "Release ${{ steps.find-release.outputs.release_name }} has been published",
              "activitySubtitle": "Released to stable branch",
              "facts": [{
                "name": "Repository",
                "value": "${{ github.repository }}"
              }, {
                "name": "Release",
                "value": "${{ steps.find-release.outputs.tag_name }}"
              }, {
                "name": "Published By",
                "value": "${{ github.actor }}"
              }],
              "text": ${{ toJSON(steps.find-release.outputs.release_body) }}
            }]
          actions: |
            [{
              "@type": "OpenUri",
              "name": "View Release",
              "targets": [{
                "os": "default",
                "uri": "${{ steps.publish-release.outputs.release_url }}"
              }]
            }]